---

- name: (Swarm) Count swarm nodes
  set_fact:
    # swarm_nodes: '{{ (groups["swarm_managers"] | default([])) | union((groups["swarm_workers"] | default([]) )) }}'
    _local_swarm_nodes:
      managers: '{{ (groups["swarm_managers"] | default([]) | intersect(docker_nodes) ) }}'
      workers: '{{ (groups["swarm_workers"] | default([])) | intersect(docker_nodes) }}'
- name: (Swarm) Normalize swarm nodes
  set_fact:
    # swarm_nodes: '{{ (groups["swarm_managers"] | default([])) | union((groups["swarm_workers"] | default([]) )) }}'
    first_swarm_manager:
      host: ' '
      hostname: ' '
    swarm_nodes:
      managers: '{{ _local_swarm_nodes.managers }}'
      workers: '{{ _local_swarm_nodes.workers }}'
      all: '{{ _local_swarm_nodes.managers | union(_local_swarm_nodes.workers) }}'
    swarm_manager_count: '{{ _local_swarm_nodes.managers | length }}'

- debug:
    var: swarm_nodes
- debug:
    msg: "manager Count {{ swarm_manager_count }}"
- name: (Swarm) Prepare facts
  set_fact:
    first_swarm_manager:
      host: '{{ swarm_nodes.managers[0]}}'
      hostname: '{{ hostvars[swarm_nodes.managers[0]].ansible_hostname  }}'
  when: swarm_manager_count | int > 0

- name: (Swarm) All nodes leave swarm (worker and manager)
  shell: "{{ command_item }}"
  failed_when: false
  changed_when: false
  become: true
  become_user: "{{ dev_user}}"
  with_items: ["docker swarm leave", "docker swarm leave --force"]
  loop_control:
    loop_var: command_item

- name: (Swarm) Launch Cluster
  block:
    - name: (Swarm) Init swarm on first manager
      include_tasks: init.yml
      when: (swarm_manager_count > 0) and (first_swarm_manager.host == inventory_hostname)
    - name: (Swarm) Gather join command
      set_fact:
        swarm_join_cmds: '{{ hostvars[first_swarm_manager.host].swarm_join_cmds_local }}'
      when: ( swarm_manager_count | int ) > 0

    - name: (Swarm) Other managers join swarm
      include_tasks: managers-except-first.yml
      when: '(swarm_manager_count | int > 1) and (inventory_hostname in swarm_nodes.managers) and (first_swarm_manager.host != inventory_hostname)' 
    - name: (Swarm) Workers join swarm
      include_tasks: workers.yml
      when: '(swarm_manager_count > 1) and (inventory_hostname in swarm_nodes.workers)'
  when: docker_launch_swarm | bool | default(false)
